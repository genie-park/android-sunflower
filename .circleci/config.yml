version: 2.1
description: 'first try'

orbs:
  apptest-ai:
    commands:
      run-test:
        parameters:
          binary_path:
            description: binary(ipa or ipk) file path 
            type: string
          access_key:
            description: apptest.ai service access token 
            type: string 
          project_id:
            description: project id in apptest.ai 
            type: string
          waiting_for_test_results:
            description: If you want build process waiting for apptest.ai test result, type ture 
            type: string
            default: 'true'
        steps:
          - run: 
             command: |
               binary_path = <<parameters.binary_path>>
               access_key = <<parameters.access_key>>
               project_id = <<parameters.project_id>>
               waiting_for_test_results = <<parameters.waiting_for_test_results>>

               serviceHost=https://api.apptest.ai
               apk_file_d='apk_file=@'\"${binary_path}\"
               data_d='data={"pid":'${project_id}',"test_set_name":"circleci_test"}'
               testRunUrl=${serviceHost}/test_set/queuing?access_key=${access_key}
               HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" -X POST -F $apk_file_d -F $data_d ${testRunUrl})

               HTTP_BODY=$(echo ${HTTP_RESPONSE} | sed -e 's/HTTPSTATUS\:.*//g')
               HTTP_STATUS=$(echo ${HTTP_RESPONSE} | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
               if [ ! ${HTTP_STATUS} -eq 200  ]; then
                 echo "Error [HTTP status: ${HTTP_STATUS}]"
                 exit
               fi
               create_test_result=$(echo $HTTP_BODY | jq -r .result)
               if [ $create_test_result == 'fail' ]; then
                 echo "apptest.ai Test Run Fail : $(echo $HTTP_BODY | jq -r .reason)"
               exit
               fi

               TEST_RUN_RESULT='false'
               tsid=$(echo $HTTP_BODY | jq -r .data.tsid)
               echo 'Your test request is accepted - Test Run id : '$tsid

               testCompleteCheckUrl=${serviceHost}/test_set/${tsid}/ci_info?access_key=${access_key}

               while [ ! "$TEST_RUN_RESULT" == "true" ] && [ "$waiting_for_test_results" == "true" ]; do
                 HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" ${testCompleteCheckUrl})
                 HTTP_BODY=$(echo ${HTTP_RESPONSE} | sed -e 's/HTTPSTATUS\:.*//g')
                 HTTP_STATUS=$(echo ${HTTP_RESPONSE} | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
                 if [ ! ${HTTP_STATUS} -eq 200  ]; then
                   echo "Error [HTTP status: ${HTTP_STATUS}]"
                   exit
                 fi
                 TEST_RUN_RESULT=$(echo $HTTP_BODY | jq -r .complete)
                 if [ "$TEST_RUN_RESULT" == "true" ]; then
                   RESULT_DATA=$(echo $HTTP_BODY | jq -r .data)
                   break
                 fi
                 echo "Waiting for Test Run(${tsid}) completed"
                 sleep 20s
               done
        
               if [ "$waiting_for_test_results" == "true" ]; then
                 echo '========================================='
                 echo $(echo $RESULT_DATA | jq -r .result_json)
                 TMP_DIR=$(mktemp -d)
                 touch ${TMP_DIR}/apptest_results.json
                 echo $(echo $RESULT_DATA | jq -r .result_json > ${TMP_DIR}/apptest_results.json)          
                 echo 'Test completed'
               fi


jobs:
  build:
    docker:
      - image: circleci/android:api-28-alpha
    steps:
      - checkout
      - run:
         command: ./gradlew assembledebug
      - apptest-ai/run-test:
         binary_path: app/build/outputs/apk/debug/app-debug.apk
         access_key: d0b20cd289994be0e423e2c42f4c09fe
         project_id: '793'
      - store_artifacts:
         path: app/build/outputs/apk/debug/

