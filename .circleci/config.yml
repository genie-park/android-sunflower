version: 2
jobs:
  build:
    docker:
    - image: circleci/android:api-28-alpha
    working_directory: ~/projects
    environment:
      JAVA_TOOL_OPTIONS: "-Xmx1024m"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
      TERM: dumb
    steps:
    - checkout
    - run:
       command: ./gradlew :assemble
    - run:
       environment: 
        binary_path: ./app/build/outputs/apk/debug/app-debug.apk
        access_key: d0b20cd289994be0e423e2c42f4c09fe
        project_id: 793
        waiting_for_test_results: 'true'

       command: |
        serviceHost=https://api.apptest.ai
        apk_file_d='apk_file=@'\"${binary_path}\"
        data_d='data={"pid":'${project_id}',"test_set_name":"circleci_test"}'
        testRunUrl=${serviceHost}/test_set/queuing?access_key=${access_key}
        HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" -X POST -F $apk_file_d -F $data_d ${testRunUrl})

        HTTP_BODY=$(echo ${HTTP_RESPONSE} | sed -e 's/HTTPSTATUS\:.*//g')
        HTTP_STATUS=$(echo ${HTTP_RESPONSE} | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        if [ ! ${HTTP_STATUS} -eq 200  ]; then
          echo "Error [HTTP status: ${HTTP_STATUS}]"
          exit
        fi
        
        create_test_result=$(echo $HTTP_BODY | jq -r .result)
        if [ $create_test_result == 'fail' ]; then
          echo "apptest.ai Test Run Fail : $(echo $HTTP_BODY | jq -r .reason)"
          exit
        fi

        TEST_RUN_RESULT='false'
        tsid=$(echo $HTTP_BODY | jq -r .data.tsid)
        echo 'Your test request is accepted - Test Run id : '$tsid

        testCompleteCheckUrl=${serviceHost}/test_set/${tsid}/ci_info?access_key=${access_key}

        echo 'waiting for ' $waiting_for_test_results
        echo 'test run result' $TEST_RUN_RESULT
        while [ ! "$TEST_RUN_RESULT" == "true" ] && [ "$waiting_for_test_results" == "true" ]; do
          HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" ${testCompleteCheckUrl})
          HTTP_BODY=$(echo ${HTTP_RESPONSE} | sed -e 's/HTTPSTATUS\:.*//g')
          HTTP_STATUS=$(echo ${HTTP_RESPONSE} | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          if [ ! ${HTTP_STATUS} -eq 200  ]; then
            echo "Error [HTTP status: ${HTTP_STATUS}]"
            exit
          fi
          TEST_RUN_RESULT=$(echo $HTTP_BODY | jq -r .complete)
          if [ "$TEST_RUN_RESULT" == "true" ]; then
            RESULT_DATA=$(echo $HTTP_BODY | jq -r .data)
            break
          fi
          echo "Waiting for Test Run(${tsid}) completed"
          sleep 20s
        done
        
        if [ "$waiting_for_test_results" == "true" ]; then
          echo '========================================='
          echo $(echo $RESULT_DATA | jq -r .result_json)
          TMP_DIR=$(mktemp -d)
          touch ${TMP_DIR}/apptest_results.json
          echo $(echo $RESULT_DATA | jq -r .result_json > ${TMP_DIR}/apptest_results.json)          
          echo 'Test completed'
        fi
